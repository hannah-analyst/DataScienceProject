!pip install sktime
!pip install skforecast
!pip install pmdarima

import sklearn
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from dateutil.parser import parse
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.dates import DateFormatter
import seaborn as sns
plt.rcParams.update({'figure.figsize': (10, 7), 'figure.dpi': 120}) # set figure sizes
import matplotlib.ticker as mtick
plt.style.use('fivethirtyeight')

df_ts = pd.read_csv('meat_supply_per_person_kg_world.csv',index_col='date',parse_dates=['date'])
df_ts.head()


def plot_df(df_ts, x, y, title="", xlabel='Year', ylabel='Meat supply (kg)', dpi=100):
 
    plt.figure(figsize=(16,5), dpi=dpi)
    plt.plot(x, y, color='tab:red')
    plt.gca().set(title=title, xlabel=xlabel, ylabel=ylabel)
    plt.show()

plot_df(df_ts, df_ts.index, y=df_ts.meat_kgs, title='World meat supply per person (kg).')


from statsmodels.tsa.seasonal import seasonal_decompose
from dateutil.parser import parse

result_add = seasonal_decompose(df_ts['meat_kgs'], model='additive', extrapolate_trend='freq')

result_add.plot()
plt.show()



import pandas as pd
from sktime.forecasting.model_selection import temporal_train_test_split
from sktime.forecasting.naive import NaiveForecaster
from sktime.forecasting.base import ForecastingHorizon
from sktime.performance_metrics.forecasting import mean_absolute_percentage_error
# Plots
# ==============================================================================
import matplotlib.pyplot as plt
from sktime.datasets import load_airline
from sktime.utils.plotting import plot_series
# Modeling and Forecasting
# ==============================================================================
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import StandardScaler

from skforecast.ForecasterAutoreg import ForecasterAutoreg
from skforecast.ForecasterAutoregCustom import ForecasterAutoregCustom
from skforecast.ForecasterAutoregDirect import ForecasterAutoregDirect
from skforecast.model_selection import grid_search_forecaster
from skforecast.model_selection import backtesting_forecaster
from skforecast.utils import save_forecaster
from skforecast.utils import load_forecaster

# Warnings configuration
# ==============================================================================
import warnings
warnings.filterwarnings('ignore')



freq = 'YS'   

print(df_ts.index.min())
print(df_ts.index.max())

complete_range = pd.date_range(start=df_ts.index.min(), end=df_ts.index.max(), freq=freq)

is_complete = set(df_ts.index) == set(complete_range)

print(f"Is the temporal index complete? {is_complete}")


data = df_ts
data['date'] = pd.to_datetime(data.index, format='%Y-%m-%d')
data = data.set_index('date')
data = data.asfreq('YS')
data = data.sort_index()
data.head()

data.index.freq


print(f'Number of rows with missing values: {data.isnull().any(axis=1).mean()}')

print(f'Shape is {data.shape}')



# Split data into train-test
# Train on the first 47 years and test on the last 15 years
# ==============================================================================
steps = 15 
data_train = data[:-steps] 
data_test  = data[-steps:] 
print(f"Train dates : {data_train.index.min()} --- {data_train.index.max()}  (n={len(data_train)})")
print(f"Test dates  : {data_test.index.min()} --- {data_test.index.max()}  (n={len(data_test)})")

fig, ax = plt.subplots(figsize=(7, 2.5))
data_train['meat_kgs'].plot(ax=ax, label='train')
data_test['meat_kgs'].plot(ax=ax, label='test')
ax.legend();



def forecast_accuracy(forecast, actual):
    mape = np.mean(np.abs(forecast - actual)/np.abs(actual))  # MAPE
    me = np.mean(forecast - actual)             # ME
    mae = np.mean(np.abs(forecast - actual))    # MAE
    mpe = np.mean((forecast - actual)/actual)   # MPE
    rmse = np.mean((forecast - actual)**2)**.5  # RMSE
    corr = np.corrcoef(forecast, actual)[0,1]   # corr
    mins = np.amin(np.hstack([forecast[:,None],
                              actual[:,None]]), axis=1)
    maxs = np.amax(np.hstack([forecast[:,None],
                              actual[:,None]]), axis=1)
    minmax = 1 - np.mean(mins/maxs)             # minmax

    return({'mape':mape, 'me':me, 'mae': mae,
            'mpe': mpe, 'rmse':rmse,
            'corr':corr, 'minmax':minmax})



from skforecast.Sarimax import Sarimax
from skforecast.ForecasterSarimax import ForecasterSarimax
from pmdarima import ARIMA
from skforecast.model_selection_sarimax import backtesting_sarimax
from skforecast.model_selection_sarimax import grid_search_sarimax



from statsmodels.tsa.stattools import acf, pacf
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# Plotting the Autocorrelation Function (ACF)
plt.figure(figsize=(14, 7))
plt.subplot(121)
plot_acf(data['meat_kgs'], ax=plt.gca(), lags=30, title='Autocorrelation Function')

# Plotting the Partial Autocorrelation Function (PACF)
plt.subplot(122)
plot_pacf(data['meat_kgs'], ax=plt.gca(), lags=30, title='Partial Autocorrelation Function')

plt.tight_layout()
plt.show()




!pip install pmdarima
from pmdarima.arima import auto_arima
arima_model = auto_arima(data_train, start_p=0, d=1, start_q=0, max_p=5, max_d=5, max_q=5, start_P=0, D=1, start_Q=0, max_P=5, max_D=5, max_Q=5, m=12, 
                         seasonal=False, error_action='warn', trace = True, suppress_warnings=True, 
                         stepwise=True, random_state=20, n_fits = 50)
arima_model.summary()


prediction = pd.DataFrame(arima_model.predict(n_periods = 15),index=data_test.index)
prediction.columns = ['predicted_meat_supply']
prediction

plt.figure(figsize=(8,5))
plt.plot(data_train,label="Training")
plt.plot(data_test,label="Test")
plt.plot(prediction,label="Predicted")
plt.legend(loc = 'upper left')
plt.show()

from sklearn.metrics import r2_score
data_test['predicted_meat_supply'] = prediction
r2_score(data_test['meat_kgs'], data_test['predicted_meat_supply'])

mape(prediction, data_test.meat_kgs)
